/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import dataStructures.QueueList;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

/**
 *
 * @author manyd
 */
public class General_Interface extends javax.swing.JFrame {

    // Variable de la cola de turnos de los usuarios
    QueueList<Integer> userQueue;
    // Variable de la cola de agentes disponibles
    QueueList<Agent> freeAgentQueue;
    // Un arreglo de agentes
    Agent[] agents;
    // Un contador de turnos
    int turnCounter;

    /**
     * Creates new form General_Interface
     */
    public General_Interface() {
        initComponents();
        initializeQueues();
        initializeAgents();
    }

    /**
     * Inicializa las colas y el contador de turnos.
     * Este método se encarga de inicializar las estructuras de datos necesarias para gestionar
     * la cola de usuarios y la cola de agentes libres. También reinicia el contador de turnos.
     */
    private void initializeQueues(){
        // Inicializa la cola de usuarios
        userQueue = new QueueList<>();

        // Inicializa la cola de agentes libres
        freeAgentQueue = new QueueList<>();

        // Reinicia el contador de turnos a cero
        turnCounter = 0;
    }

    /**
     * Inicializa los agentes y los añade a la cola de agentes libres.
     * Este método se encarga de crear una lista de agentes, asociando cada uno con sus respectivos
     * componentes de la interfaz gráfica (panel, etiqueta y botón). Luego, añade cada agente
     * a la cola de agentes libres.
     */
    private void initializeAgents() {
        // Inicializa el arreglo de agentes con espacio para 4 agentes
        agents = new Agent[4];

        // Crea e inicializa cada agente con sus componentes gráficos y un ID único
        agents[0] = new Agent(place1Box, place1Text, place1Btn, 1);
        agents[1] = new Agent(place2Box, place2Text, place2Btn, 2);
        agents[2] = new Agent(place3Box, place3Text, place3Btn, 3);
        agents[3] = new Agent(place4Box, place4Text, place4Btn, 4);

        // Añade cada agente a la cola de agentes libres
        for (Agent agent : agents) {
            freeAgentQueue.enqueue(agent);
        }
    }

    /**
     * La clase Agent representa un agente en el sistema, asociado a componentes gráficos específicos.
     * Cada agente tiene un identificador único (agentID) y está vinculado a un JPanel, JLabel y JButton
     * que representan su estado visual en la interfaz gráfica.
     */
    public static class Agent {
        private final int agentID;      // Identificador único del agente
        private final JPanel box;       // Panel que representa el área del agente en la interfaz gráfica
        private final JLabel text;      // Etiqueta que muestra información sobre el agente
        private final JButton button;   // Botón asociado al agente

        /**
         * Constructor para crear un nuevo agente.
         *
         * @param box El JPanel asociado al agente.
         * @param text El JLabel asociado al agente.
         * @param button El JButton asociado al agente.
         * @param agentID El identificador único del agente.
         */
        public Agent(JPanel box, JLabel text, JButton button, int agentID) {
            this.box = box;
            this.text = text;
            this.button = button;
            this.agentID = agentID;
        }

        /**
         * Obtiene el JPanel asociado al agente.
         *
         * @return El JPanel del agente.
         */
        public JPanel getBox() {
            return box;
        }

        /**
         * Obtiene el JLabel asociado al agente.
         *
         * @return El JLabel del agente.
         */
        public JLabel getText() {
            return text;
        }

        /**
         * Obtiene el JButton asociado al agente.
         *
         * @return El JButton del agente.
         */
        public JButton getButton() {
            return button;
        }

        /**
         * Obtiene el identificador único del agente.
         *
         * @return El ID del agente.
         */
        public int getAgentID() {
            return agentID;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        place1Btn = new javax.swing.JButton();
        place2Btn = new javax.swing.JButton();
        place3Btn = new javax.swing.JButton();
        place4Btn = new javax.swing.JButton();
        place1Box = new javax.swing.JPanel();
        place1Text = new javax.swing.JLabel();
        place2Box = new javax.swing.JPanel();
        place2Text = new javax.swing.JLabel();
        place3Box = new javax.swing.JPanel();
        place3Text = new javax.swing.JLabel();
        place4Box = new javax.swing.JPanel();
        place4Text = new javax.swing.JLabel();
        requestTurnBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        awaitingTurnsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setVisible(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        place1Btn.setText("Libre");
        place1Btn.setEnabled(false);
        place1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place1BtnActionPerformed(evt);
            }
        });

        place2Btn.setText("Libre");
        place2Btn.setEnabled(false);
        place2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place2BtnActionPerformed(evt);
            }
        });

        place3Btn.setText("Libre");
        place3Btn.setEnabled(false);
        place3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place3BtnActionPerformed(evt);
            }
        });

        place4Btn.setText("Libre");
        place4Btn.setEnabled(false);
        place4Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                place4BtnActionPerformed(evt);
            }
        });

        place1Box.setBackground(new java.awt.Color(0, 255, 0));

        place1Text.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        place1Text.setForeground(new java.awt.Color(0, 0, 0));
        place1Text.setText("Libre");

        javax.swing.GroupLayout place1BoxLayout = new javax.swing.GroupLayout(place1Box);
        place1Box.setLayout(place1BoxLayout);
        place1BoxLayout.setHorizontalGroup(
            place1BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place1BoxLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(place1Text)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        place1BoxLayout.setVerticalGroup(
            place1BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place1BoxLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(place1Text)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        place2Box.setBackground(new java.awt.Color(0, 255, 0));

        place2Text.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        place2Text.setForeground(new java.awt.Color(0, 0, 0));
        place2Text.setText("Libre");

        javax.swing.GroupLayout place2BoxLayout = new javax.swing.GroupLayout(place2Box);
        place2Box.setLayout(place2BoxLayout);
        place2BoxLayout.setHorizontalGroup(
            place2BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place2BoxLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(place2Text)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        place2BoxLayout.setVerticalGroup(
            place2BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place2BoxLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(place2Text)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        place3Box.setBackground(new java.awt.Color(0, 255, 0));

        place3Text.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        place3Text.setForeground(new java.awt.Color(0, 0, 0));
        place3Text.setText("Libre");

        javax.swing.GroupLayout place3BoxLayout = new javax.swing.GroupLayout(place3Box);
        place3Box.setLayout(place3BoxLayout);
        place3BoxLayout.setHorizontalGroup(
            place3BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place3BoxLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(place3Text)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        place3BoxLayout.setVerticalGroup(
            place3BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place3BoxLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(place3Text)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        place4Box.setBackground(new java.awt.Color(0, 255, 0));

        place4Text.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        place4Text.setForeground(new java.awt.Color(0, 0, 0));
        place4Text.setText("Libre");

        javax.swing.GroupLayout place4BoxLayout = new javax.swing.GroupLayout(place4Box);
        place4Box.setLayout(place4BoxLayout);
        place4BoxLayout.setHorizontalGroup(
            place4BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place4BoxLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(place4Text)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        place4BoxLayout.setVerticalGroup(
            place4BoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(place4BoxLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(place4Text)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        requestTurnBtn.setText("Solicitar Turno");
        requestTurnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTurnBtnActionPerformed(evt);
            }
        });

        awaitingTurnsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Turno en Espera"
            }
        ));
        jScrollPane3.setViewportView(awaitingTurnsTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Asesor 1");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Asesor 2");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Asesor 3");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Asesor 4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(requestTurnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(place1Btn)
                            .addComponent(place2Btn)
                            .addComponent(place4Btn)
                            .addComponent(place3Btn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(place3Box, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(place4Box, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(place2Box, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(place1Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(99, 99, 99))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(place1Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1)))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(place2Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(place3Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(place4Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel4))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(place1Btn)
                        .addGap(35, 35, 35)
                        .addComponent(place2Btn)
                        .addGap(35, 35, 35)
                        .addComponent(place3Btn)
                        .addGap(35, 35, 35)
                        .addComponent(place4Btn)))
                .addGap(18, 18, 18)
                .addComponent(requestTurnBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setVisible(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Turno", "Asesor"
            }
        ));
        jScrollPane2.setViewportView(userTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDesktopPane1.setLayer(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jInternalFrame2)
                    .addComponent(jInternalFrame1))
                .addGap(113, 113, 113))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento que se ejecuta cuando se presiona el botón asociado al agente 1.
     * Este método llama a setAgentFree para liberar al agente 1 (agents[0]).
     * @param evt El evento de acción generado al presionar el botón.
     */
    private void place1BtnActionPerformed(java.awt.event.ActionEvent evt) {
        setAgentFree(agents[0]);
    }

    /**
     * Evento que se ejecuta cuando se presiona el botón asociado al agente 2.
     * Este método llama a setAgentFree para liberar al agente 2 (agents[1]).
     * @param evt El evento de acción generado al presionar el botón.
     */
    private void place2BtnActionPerformed(java.awt.event.ActionEvent evt) {
        setAgentFree(agents[1]);
    }

    /**
     * Evento que se ejecuta cuando se presiona el botón asociado al agente 3.
     * Este método llama a setAgentFree para liberar al agente 3 (agents[2]).
     * @param evt El evento de acción generado al presionar el botón.
     */
    private void place3BtnActionPerformed(java.awt.event.ActionEvent evt) {
        setAgentFree(agents[2]);
    }

    /**
     * Evento que se ejecuta cuando se presiona el botón asociado al agente 4.
     * Este método llama a setAgentFree para liberar al agente 4 (agents[3]).
     * @param evt El evento de acción generado al presionar el botón.
     */
    private void place4BtnActionPerformed(java.awt.event.ActionEvent evt) {
        setAgentFree(agents[3]);
    }

    /**
     * Maneja el evento de acción generado cuando se presiona el botón de solicitud de turno.
     * Este método encola un nuevo turno incrementando el contador de turnos, busca un agente libre
     * y asigna el turno si hay un agente disponible. Si no hay agentes disponibles, añade el turno
     * a la lista de espera.
     * @param evt El evento de acción generado al presionar el botón.
     */
    private void requestTurnBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // Incrementa el contador de turnos y encola el nuevo turno
        userQueue.enqueue(++turnCounter);

        // Busca un agente libre
        Agent agent = searchFreeAgent();

        // Asigna el turno si hay un agente libre, de lo contrario añade a la lista de espera
        if(agent != null)
            assignTurn(agent);
        else
            addToWaitingList(userQueue.getTail().getElement());
    }

    /**
     * Marca al agente como libre y lo añade a la cola de agentes libres.
     * Este método actualiza la interfaz de usuario para mostrar que el agente está libre,
     * lo añade a la cola de agentes libres y asigna un nuevo turno si hay usuarios en la cola de espera.
     *
     * @param agent El agente que se va a marcar como libre.
     */
    private void setAgentFree(Agent agent){
        // Actualiza la interfaz de usuario para mostrar que el agente está libre
        updateAgentUIToFree(agent);

        // Añade el agente a la cola de agentes libres
        freeAgentQueue.enqueue(agent);

        // Asigna un nuevo turno si hay usuarios esperando en la cola
        if(!userQueue.isEmpty())
            assignTurn(agent);
    }

    /**
     * Actualiza la interfaz de usuario para mostrar que el agente está libre.
     * Este método cambia el color del panel del agente a verde, actualiza el texto a "Libre"
     * y deshabilita el botón del agente.
     *
     * @param agent El agente cuya interfaz de usuario se va a actualizar.
     */
    private void updateAgentUIToFree(Agent agent){
        agent.getBox().setBackground(Color.GREEN);
        agent.getText().setText("Libre");
        agent.getButton().setEnabled(false);
    }


    /**
     * Actualiza la interfaz de usuario del agente para mostrar el turno asignado.
     * Este método cambia el color del panel del agente a rojo, actualiza el texto con el turno
     * asignado y habilita el botón del agente.
     * @param agent El agente cuya interfaz de usuario se va a actualizar.
     * @param turn El turno asignado al agente.
     */
    private void updateAgentUIWithTurn(int turn, Agent agent){
        agent.getBox().setBackground(Color.RED);
        agent.getText().setText(String.valueOf(turn));
        agent.getButton().setEnabled(true);
    }

    /**
     * Asigna un turno a un agente.
     * Este método desencola un turno de la cola de usuarios, muestra el turno en la interfaz
     * del agente, actualiza la interfaz de usuario para reflejar el estado ocupado del agente,
     * y elimina el turno de la lista de espera.
     * @param agent El agente al que se le asignará el turno.
     */
    private void assignTurn(Agent agent){
        // Desencola el siguiente turno
        int turn = userQueue.dequeue();

        // Muestra el turno en la interfaz del usuario
        showUserTurn(turn, agent);

        // Actualiza la interfaz de usuario del agente
        updateAgentUIWithTurn(turn, agent);

        // Elimina el turno de la lista de espera
        removeWaitingList(turn);
    }

    /**
     * Busca un agente libre en la cola de agentes libres.
     * Si hay al menos un agente libre en la cola, lo desencola y lo devuelve.
     * En caso contrario, devuelve null.
     * @return El agente libre encontrado, o null si no hay agentes libres.
     */
    private Agent searchFreeAgent(){
        // Si la cola de agentes libres está vacía, devuelve null
        if (freeAgentQueue.isEmpty())
            return null;
        else
            // Si hay agentes libres, desencola y devuelve el primer agente libre
            return freeAgentQueue.dequeue();

    }

    /**
     * Muestra el turno del usuario en la tabla y muestra un mensaje de alerta.
     * Este método agrega una nueva fila a la tabla de usuarios con el turno asignado,
     * eliminando cualquier fila existente para el mismo agente, y muestra un mensaje
     * de alerta con información sobre el turno asignado al agente.
     * @param turn El número del turno asignado al usuario.
     * @param agent El agente al que se le asignó el turno.
     */
    private void showUserTurn(int turn, Agent agent){
        DefaultTableModel modelUserTable = (DefaultTableModel) userTable.getModel();

        // Eliminar cualquier fila existente para el mismo agente
        removeRowForAgent(modelUserTable, agent.getAgentID());

        // Agregar una nueva fila con el turno asignado al agente
        Object[] rowData = { String.valueOf(turn), String.valueOf(agent.getAgentID()) };
        modelUserTable.addRow(rowData);

        // Mostrar un mensaje de alerta con información sobre el turno asignado
        JOptionPane.showMessageDialog(jInternalFrame2,
                String.format("Turno %d pasar al asersor %d", turn, agent.getAgentID()));
    }

    /**
     * Elimina cualquier fila de la tabla que corresponda al agente especificado.
     * Este método busca y elimina cualquier fila de la tabla que tenga el mismo ID de agente
     * que el proporcionado.
     * @param tableModel El modelo de la tabla en el que se va a buscar y eliminar la fila.
     * @param agentID El ID del agente cuyas filas se van a eliminar.
     */
    private void removeRowForAgent(DefaultTableModel tableModel, int agentID){
        for(int row = 0; row < tableModel.getRowCount(); row++)
            if(Integer.parseInt(tableModel.getValueAt(row, 1).toString())  == agentID){
                tableModel.removeRow(row);
                break; // Se eliminó la fila, salir del bucle
            }
    }


    /**
     * Agrega un nuevo turno a la lista de espera en la tabla.
     * Este método agrega un nuevo turno a la lista de espera en la tabla,
     * mostrando el turno asignado a los usuarios que están esperando ser atendidos.
     * @param turn El número del turno a agregar a la lista de espera.
     */
    private void addToWaitingList(int turn){
        try {
            // Obtener el modelo de la tabla de espera
            DefaultTableModel waitingListModel = (DefaultTableModel) awaitingTurnsTable.getModel();

            // Crear un arreglo de objetos con la información del turno
            Object[] info = { turn };

            // Agregar una nueva fila con la información del turno al modelo de la tabla
            waitingListModel.addRow(info);

            // Mostrar un mensaje de registro o confirmación
            JOptionPane.showMessageDialog(jInternalFrame1,
                    "Turno " + turn + " agregado a la lista de espera.");
        } catch (Exception e) {
            // Manejar cualquier excepción que pueda ocurrir al acceder al modelo de la tabla
            System.out.println(e.getMessage());
        }

    }

    /**
     * Elimina un turno de la lista de espera en la tabla.
     * Este método busca y elimina el turno especificado de la lista de espera en la tabla,
     * basándose en el número de turno proporcionado.
     * @param turn El número del turno a eliminar de la lista de espera.
     */
    private void removeWaitingList(int turn){
        try {
            // Obtener el modelo de la tabla de espera
            DefaultTableModel waitingListModel = (DefaultTableModel) awaitingTurnsTable.getModel();

            // Iterar sobre todas las filas del modelo de la tabla
            for(int row = 0;  row < waitingListModel.getRowCount(); row++)
                // Obtener el turno de la fila actual y verificar si coincide con el turno especificado
                if(Integer.parseInt(waitingListModel.getValueAt(row, 0).toString()) == turn){
                    // Si se encuentra el turno, eliminar la fila correspondiente y salir del bucle
                    waitingListModel.removeRow(row);
                    break;
                }
        } catch (Exception e) {
            // Manejar cualquier excepción que pueda ocurrir al acceder al modelo de la tabla
            System.out.println(e.getMessage());
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(General_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(General_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(General_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(General_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new General_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable awaitingTurnsTable;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel place1Box;
    private javax.swing.JButton place1Btn;
    private javax.swing.JLabel place1Text;
    private javax.swing.JPanel place2Box;
    private javax.swing.JButton place2Btn;
    private javax.swing.JLabel place2Text;
    private javax.swing.JPanel place3Box;
    private javax.swing.JButton place3Btn;
    private javax.swing.JLabel place3Text;
    private javax.swing.JPanel place4Box;
    private javax.swing.JButton place4Btn;
    private javax.swing.JLabel place4Text;
    private javax.swing.JButton requestTurnBtn;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
